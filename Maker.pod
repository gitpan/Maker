=head1 NAME

Maker - Yet Another Make-like Program

=head1 DESCRIPTION

Why yet another make?  I have never found a make program that I
thought was flexible enough and easy enough.  In fact, a year of two
ago I wrote a make package similar to this one but it turned out to
have some design flaws and I ended up discarding it.  Here are some
features that make this maker unique:

=item Due to the adherence to object-oriented organization, multiple
targets can easily be built in the same be-file in a natural and
obvious manner.

=item Rules have two phases of execution.  Once when they are added
to the rule tree and once when they are executed.  The complete power
of perl is available at both times.  Rules do not need to be written
only in terms of pattern matching.  This makes for more organic, 
intelligent behavior.

=item The reliance of the rule selection engine is kept to an absolute
minimum.  Be-files state exactly what to do in a direct procedural
fashion.  The full power of perl is available to factor out duplicate
information.

I have little hope of seeing this module gain widespread use.
/bin/make is far too entrenched, even if an alternative is superior in
all respects.  Furthermore, as more people start using Perl and Java,
makefiles will become a headache of the past.

=head1 TODO

=item A front-end needs to be designed to allow be-files to be
very short and simple.  I tend to think of the be-files as
a target language for a front-end preprocessor.  At least there
should be a script to get people up and compiling quick.

=item Makefile.PL translator & front-end for be-files.

=item Generate dependencies with makedepend and grok them.

=item RCS/SCCS/ClearCase support.

=item Parallel builds on multiple hosts.  (Already set up, should be easy.)

=item The documentation.

=head1 SYNOPSIS

=head1 AUTHOR

Joshua Pritikin, pritikin@mindspring.com

=head1 SEE ALSO

MakeMaker, /bin/make, gmake, nmake, imake, build, cook, plan9 make,
clearmake, ParallelMake, etc..

=cut

